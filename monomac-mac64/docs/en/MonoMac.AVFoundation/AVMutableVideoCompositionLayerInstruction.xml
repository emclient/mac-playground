<Type Name="AVMutableVideoCompositionLayerInstruction" FullName="MonoMac.AVFoundation.AVMutableVideoCompositionLayerInstruction">
  <TypeSignature Language="C#" Value="public class AVMutableVideoCompositionLayerInstruction : MonoMac.AVFoundation.AVVideoCompositionLayerInstruction" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AVMutableVideoCompositionLayerInstruction extends MonoMac.AVFoundation.AVVideoCompositionLayerInstruction" />
  <AssemblyInfo>
    <AssemblyName>MonoMac</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoMac.AVFoundation.AVVideoCompositionLayerInstruction</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>MonoMac.Foundation.Register("AVMutableVideoCompositionLayerInstruction", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AVMutableVideoCompositionLayerInstruction ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor that initializes a new instance of this class with no parameters.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AVMutableVideoCompositionLayerInstruction (MonoMac.Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoMac.Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="MonoMac.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AVMutableVideoCompositionLayerInstruction (MonoMac.Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoMac.Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="MonoMac.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes when the derived class has an [Export] constructor.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they are initialized using an [Export] attribute. The argument value is ignore, typically the chaining would look like this:</para>
          <example>
            <code lang="C#">
public class MyClass : BaseClass {
    [Export ("initWithFoo:")]
    public MyClass (string foo) : base (NSObjectFlag.Empty)
    {
        ...
    }
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AVMutableVideoCompositionLayerInstruction (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:MonoMac.ObjCRuntime.GetNSObject (System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each MonoMac class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static MonoMac.AVFoundation.AVMutableVideoCompositionLayerInstruction Create ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoMac.AVFoundation.AVMutableVideoCompositionLayerInstruction Create() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("videoCompositionLayerInstruction")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoMac.AVFoundation.AVMutableVideoCompositionLayerInstruction</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromAssetTrack">
      <MemberSignature Language="C#" Value="public static MonoMac.AVFoundation.AVMutableVideoCompositionLayerInstruction FromAssetTrack (MonoMac.AVFoundation.AVAssetTrack track);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoMac.AVFoundation.AVMutableVideoCompositionLayerInstruction FromAssetTrack(class MonoMac.AVFoundation.AVAssetTrack track) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("videoCompositionLayerInstructionWithAssetTrack:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoMac.AVFoundation.AVMutableVideoCompositionLayerInstruction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="track" Type="MonoMac.AVFoundation.AVAssetTrack" />
      </Parameters>
      <Docs>
        <param name="track">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetOpacity">
      <MemberSignature Language="C#" Value="public virtual void SetOpacity (float opacity, MonoMac.CoreMedia.CMTime time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetOpacity(float32 opacity, valuetype MonoMac.CoreMedia.CMTime time) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("setOpacity:atTime:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="opacity" Type="System.Single" />
        <Parameter Name="time" Type="MonoMac.CoreMedia.CMTime" />
      </Parameters>
      <Docs>
        <param name="opacity">To be added.</param>
        <param name="time">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetOpacityRamp">
      <MemberSignature Language="C#" Value="public virtual void SetOpacityRamp (float startOpacity, float endOpacity, MonoMac.CoreMedia.CMTimeRange timeRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetOpacityRamp(float32 startOpacity, float32 endOpacity, valuetype MonoMac.CoreMedia.CMTimeRange timeRange) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("setOpacityRampFromStartOpacity:toEndOpacity:timeRange:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startOpacity" Type="System.Single" />
        <Parameter Name="endOpacity" Type="System.Single" />
        <Parameter Name="timeRange" Type="MonoMac.CoreMedia.CMTimeRange" />
      </Parameters>
      <Docs>
        <param name="startOpacity">To be added.</param>
        <param name="endOpacity">To be added.</param>
        <param name="timeRange">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTransform">
      <MemberSignature Language="C#" Value="public virtual void SetTransform (MonoMac.CoreGraphics.CGAffineTransform transform, MonoMac.CoreMedia.CMTime atTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetTransform(valuetype MonoMac.CoreGraphics.CGAffineTransform transform, valuetype MonoMac.CoreMedia.CMTime atTime) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("setTransform:atTime:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transform" Type="MonoMac.CoreGraphics.CGAffineTransform" />
        <Parameter Name="atTime" Type="MonoMac.CoreMedia.CMTime" />
      </Parameters>
      <Docs>
        <param name="transform">To be added.</param>
        <param name="atTime">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTransformRamp">
      <MemberSignature Language="C#" Value="public virtual void SetTransformRamp (MonoMac.CoreGraphics.CGAffineTransform startTransform, MonoMac.CoreGraphics.CGAffineTransform endTransform, MonoMac.CoreMedia.CMTimeRange timeRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetTransformRamp(valuetype MonoMac.CoreGraphics.CGAffineTransform startTransform, valuetype MonoMac.CoreGraphics.CGAffineTransform endTransform, valuetype MonoMac.CoreMedia.CMTimeRange timeRange) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("setTransformRampFromStartTransform:toEndTransform:timeRange:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startTransform" Type="MonoMac.CoreGraphics.CGAffineTransform" />
        <Parameter Name="endTransform" Type="MonoMac.CoreGraphics.CGAffineTransform" />
        <Parameter Name="timeRange" Type="MonoMac.CoreMedia.CMTimeRange" />
      </Parameters>
      <Docs>
        <param name="startTransform">To be added.</param>
        <param name="endTransform">To be added.</param>
        <param name="timeRange">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrackID">
      <MemberSignature Language="C#" Value="public virtual int TrackID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TrackID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoMac.Foundation.Export("trackID")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoMac.Foundation.Export("setTrackID:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
