<Type Name="NSTimer" FullName="MonoMac.Foundation.NSTimer">
  <TypeSignature Language="C#" Value="public class NSTimer : MonoMac.Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NSTimer extends MonoMac.Foundation.NSObject" />
  <AssemblyInfo>
    <AssemblyName>MonoMac</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoMac.Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>MonoMac.Foundation.Register("NSTimer", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>The timer can trigger actions at certain time intervals.</summary>
    <remarks>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSTimer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This instance of NSTimer would be unusable. Symbol kept for binary compatibility", true)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSTimer (MonoMac.Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoMac.Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="MonoMac.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSTimer (MonoMac.Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoMac.Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="MonoMac.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes when the derived class has an [Export] constructor.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they are initialized using an [Export] attribute. The argument value is ignore, typically the chaining would look like this:</para>
          <example>
            <code lang="C#">
public class MyClass : BaseClass {
    [Export ("initWithFoo:")]
    public MyClass (string foo) : base (NSObjectFlag.Empty)
    {
        ...
    }
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSTimer (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:MonoMac.ObjCRuntime.GetNSObject (System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSTimer (MonoMac.Foundation.NSDate date, TimeSpan when, MonoMac.Foundation.NSAction action, bool repeats);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoMac.Foundation.NSDate date, valuetype System.TimeSpan when, class MonoMac.Foundation.NSAction action, bool repeats) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="date" Type="MonoMac.Foundation.NSDate" />
        <Parameter Name="when" Type="System.TimeSpan" />
        <Parameter Name="action" Type="MonoMac.Foundation.NSAction" />
        <Parameter Name="repeats" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="date">Time at which the timer will be fired.</param>
        <param name="when">This is the duration between when the timer will fire. </param>
        <param name="action">The action to be performed when the timer fires.</param>
        <param name="repeats">Whether this timer should repeat automatically (true) or will be invalidated after firing the first time (false).</param>
        <summary>
        </summary>
        <remarks>To be added.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSTimer (MonoMac.Foundation.NSDate date, double seconds, MonoMac.Foundation.NSObject target, MonoMac.ObjCRuntime.Selector selector, MonoMac.Foundation.NSObject userInfo, bool repeats);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoMac.Foundation.NSDate date, float64 seconds, class MonoMac.Foundation.NSObject target, class MonoMac.ObjCRuntime.Selector selector, class MonoMac.Foundation.NSObject userInfo, bool repeats) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("initWithFireDate:interval:target:selector:userInfo:repeats:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="date" Type="MonoMac.Foundation.NSDate" />
        <Parameter Name="seconds" Type="System.Double" />
        <Parameter Name="target" Type="MonoMac.Foundation.NSObject" />
        <Parameter Name="selector" Type="MonoMac.ObjCRuntime.Selector" />
        <Parameter Name="userInfo" Type="MonoMac.Foundation.NSObject" />
        <Parameter Name="repeats" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="date">Time at which the timer will be fired.</param>
        <param name="seconds">For repeating timers, the number of seconds to wait before firing the timer again.</param>
        <param name="target">This is an object containing the method to be invoked when the timer fires.</param>
        <param name="selector">The method on <paramref name="target" /> that will be invoked.</param>
        <param name="userInfo">
          <para>User info for the timer.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="repeats">Whether this timer should repeat automatically (true) or will be invalidated after firing the first time (false).</param>
        <summary>
        </summary>
        <remarks>To be added.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each MonoMac class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRepeatingScheduledTimer">
      <MemberSignature Language="C#" Value="public static MonoMac.Foundation.NSTimer CreateRepeatingScheduledTimer (double seconds, MonoMac.Foundation.NSAction action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoMac.Foundation.NSTimer CreateRepeatingScheduledTimer(float64 seconds, class MonoMac.Foundation.NSAction action) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.Foundation.NSTimer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seconds" Type="System.Double" />
        <Parameter Name="action" Type="MonoMac.Foundation.NSAction" />
      </Parameters>
      <Docs>
        <param name="seconds">The number of seconds between the timer firing.</param>
        <param name="action">Some action to be performed when the timer fires.</param>
        <summary>Creates a repeating timer with the specified parameters and schedules it for execution on the current NSRunLoop in the default mode.</summary>
        <returns>
        </returns>
        <remarks>To be added.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRepeatingScheduledTimer">
      <MemberSignature Language="C#" Value="public static MonoMac.Foundation.NSTimer CreateRepeatingScheduledTimer (TimeSpan when, MonoMac.Foundation.NSAction action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoMac.Foundation.NSTimer CreateRepeatingScheduledTimer(valuetype System.TimeSpan when, class MonoMac.Foundation.NSAction action) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.Foundation.NSTimer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="when" Type="System.TimeSpan" />
        <Parameter Name="action" Type="MonoMac.Foundation.NSAction" />
      </Parameters>
      <Docs>
        <param name="when">The time when the timer will first fire.</param>
        <param name="action">The action to be performed when the timer fires.</param>
        <summary>Creates a repeating timer with the specified parameters and schedules it for execution on the current NSRunLoop in the default mode.</summary>
        <returns>
        </returns>
        <remarks>To be added.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRepeatingTimer">
      <MemberSignature Language="C#" Value="public static MonoMac.Foundation.NSTimer CreateRepeatingTimer (double seconds, MonoMac.Foundation.NSAction action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoMac.Foundation.NSTimer CreateRepeatingTimer(float64 seconds, class MonoMac.Foundation.NSAction action) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.Foundation.NSTimer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seconds" Type="System.Double" />
        <Parameter Name="action" Type="MonoMac.Foundation.NSAction" />
      </Parameters>
      <Docs>
        <param name="seconds">The number of seconds between the timer firing.</param>
        <param name="action">The action to be performed.</param>
        <summary>Creates a repeating timer with the specified parameters that can later be added to an NSRunLoop.</summary>
        <returns>
        </returns>
        <remarks>To be added.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRepeatingTimer">
      <MemberSignature Language="C#" Value="public static MonoMac.Foundation.NSTimer CreateRepeatingTimer (TimeSpan when, MonoMac.Foundation.NSAction action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoMac.Foundation.NSTimer CreateRepeatingTimer(valuetype System.TimeSpan when, class MonoMac.Foundation.NSAction action) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.Foundation.NSTimer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="when" Type="System.TimeSpan" />
        <Parameter Name="action" Type="MonoMac.Foundation.NSAction" />
      </Parameters>
      <Docs>
        <param name="when">To be added.</param>
        <param name="action">To be added.</param>
        <summary>Creates a repeating timer with the specified parameters that can later be added to an NSRunLoop.</summary>
        <returns>The timespan between firings of the timer.</returns>
        <remarks>To be added.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateScheduledTimer">
      <MemberSignature Language="C#" Value="public static MonoMac.Foundation.NSTimer CreateScheduledTimer (double seconds, MonoMac.Foundation.NSAction action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoMac.Foundation.NSTimer CreateScheduledTimer(float64 seconds, class MonoMac.Foundation.NSAction action) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.Foundation.NSTimer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seconds" Type="System.Double" />
        <Parameter Name="action" Type="MonoMac.Foundation.NSAction" />
      </Parameters>
      <Docs>
        <param name="seconds">The number of seconds between the firings of the timer.</param>
        <param name="action">The action to be performed.</param>
        <summary>Creates a timer with the specified parameters and schedules it for execution on the current NSRunLoop in the default mode.</summary>
        <returns>
        </returns>
        <remarks>To be added.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateScheduledTimer">
      <MemberSignature Language="C#" Value="public static MonoMac.Foundation.NSTimer CreateScheduledTimer (TimeSpan when, MonoMac.Foundation.NSAction action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoMac.Foundation.NSTimer CreateScheduledTimer(valuetype System.TimeSpan when, class MonoMac.Foundation.NSAction action) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.Foundation.NSTimer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="when" Type="System.TimeSpan" />
        <Parameter Name="action" Type="MonoMac.Foundation.NSAction" />
      </Parameters>
      <Docs>
        <param name="when">The interval between firings of the timer.</param>
        <param name="action">The action to be performed.</param>
        <summary>Creates a timer with the specified parameters that can later be added to an NSRunLoop.</summary>
        <returns>
        </returns>
        <remarks>To be added.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateScheduledTimer">
      <MemberSignature Language="C#" Value="public static MonoMac.Foundation.NSTimer CreateScheduledTimer (double seconds, MonoMac.Foundation.NSObject target, MonoMac.ObjCRuntime.Selector selector, MonoMac.Foundation.NSObject userInfo, bool repeats);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoMac.Foundation.NSTimer CreateScheduledTimer(float64 seconds, class MonoMac.Foundation.NSObject target, class MonoMac.ObjCRuntime.Selector selector, class MonoMac.Foundation.NSObject userInfo, bool repeats) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoMac.Foundation.NSTimer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seconds" Type="System.Double" />
        <Parameter Name="target" Type="MonoMac.Foundation.NSObject" />
        <Parameter Name="selector" Type="MonoMac.ObjCRuntime.Selector" />
        <Parameter Name="userInfo" Type="MonoMac.Foundation.NSObject" />
        <Parameter Name="repeats" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="seconds">The number of seconds between firings of the timer.</param>
        <param name="target">An object that will be invoked when the timer fires.</param>
        <param name="selector">The method to invoke on <paramref name="target" />.</param>
        <param name="userInfo">
          <para>Custom user info for the timer.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="repeats">Whether this timer should repeat automatically (true) or will be invalidated after firing the first time (false).</param>
        <summary>Creates a timer with the specified parameters and schedules it for execution on the current NSRunLoop in the default mode. </summary>
        <returns>
        </returns>
        <remarks>To be added.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateTimer">
      <MemberSignature Language="C#" Value="public static MonoMac.Foundation.NSTimer CreateTimer (double seconds, MonoMac.Foundation.NSAction action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoMac.Foundation.NSTimer CreateTimer(float64 seconds, class MonoMac.Foundation.NSAction action) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.Foundation.NSTimer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seconds" Type="System.Double" />
        <Parameter Name="action" Type="MonoMac.Foundation.NSAction" />
      </Parameters>
      <Docs>
        <param name="seconds">The number of seconds until the <paramref name="action" /> is invoked.</param>
        <param name="action">Some action to be performed.</param>
        <summary>Creates a timer object that can be later added to an NSRunLoop.</summary>
        <returns>
        </returns>
        <remarks>To be added.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateTimer">
      <MemberSignature Language="C#" Value="public static MonoMac.Foundation.NSTimer CreateTimer (TimeSpan when, MonoMac.Foundation.NSAction action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoMac.Foundation.NSTimer CreateTimer(valuetype System.TimeSpan when, class MonoMac.Foundation.NSAction action) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.Foundation.NSTimer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="when" Type="System.TimeSpan" />
        <Parameter Name="action" Type="MonoMac.Foundation.NSAction" />
      </Parameters>
      <Docs>
        <param name="when">The length of time until the <paramref name="action" /> is invoked.</param>
        <param name="action">Some action to be performed.</param>
        <summary>Creates a timer object that can be later added to an NSRunLoop.</summary>
        <returns>
        </returns>
        <remarks>To be added.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateTimer">
      <MemberSignature Language="C#" Value="public static MonoMac.Foundation.NSTimer CreateTimer (double seconds, MonoMac.Foundation.NSObject target, MonoMac.ObjCRuntime.Selector selector, MonoMac.Foundation.NSObject userInfo, bool repeats);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoMac.Foundation.NSTimer CreateTimer(float64 seconds, class MonoMac.Foundation.NSObject target, class MonoMac.ObjCRuntime.Selector selector, class MonoMac.Foundation.NSObject userInfo, bool repeats) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("timerWithTimeInterval:target:selector:userInfo:repeats:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoMac.Foundation.NSTimer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seconds" Type="System.Double" />
        <Parameter Name="target" Type="MonoMac.Foundation.NSObject" />
        <Parameter Name="selector" Type="MonoMac.ObjCRuntime.Selector" />
        <Parameter Name="userInfo" Type="MonoMac.Foundation.NSObject" />
        <Parameter Name="repeats" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="seconds">The number of seconds between firings of the timer.</param>
        <param name="target">An object that will be invoked when the timer fires.</param>
        <param name="selector">The method that will be invoked on <paramref name="target" />.</param>
        <param name="userInfo">
          <para>Custom user information.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="repeats">Whether this timer should repeat automatically (true) or will be invalidated after firing the first time (false).</param>
        <summary>Creates a timer object that can be later added to an NSRunLoop.</summary>
        <returns>
        </returns>
        <remarks>To be added.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <para>If set to <see langword="true" />, the method is invoked directly and will dispose manage and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
        </param>
        <summary>Releases the resources used by the NSTimer object.</summary>
        <remarks>
          <para>This Dispose method releases the resources used by the NSTimer class.</para>
          <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposting <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
          <para>Calling the Dispose method when you are finished using the NSTimer ensures that all external resources used by this managed object are released as soon as possible.  Once you have invoked the Dispose method, the object is no longer useful and you should no longer make any calls to it.</para>
          <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at http://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Fire">
      <MemberSignature Language="C#" Value="public virtual void Fire ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Fire() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("fire")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Causes the action to be performed.</summary>
        <remarks>To be added.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FireDate">
      <MemberSignature Language="C#" Value="public virtual MonoMac.Foundation.NSDate FireDate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoMac.Foundation.NSDate FireDate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoMac.Foundation.Export("fireDate")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoMac.Foundation.Export("setFireDate:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoMac.Foundation.NSDate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The date at with the action will be performed.</summary>
        <value>
        </value>
        <remarks>If the timer is no longer valid, then this will return the last date the action was performed.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invalidate">
      <MemberSignature Language="C#" Value="public virtual void Invalidate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Invalidate() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("invalidate")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValid">
      <MemberSignature Language="C#" Value="public virtual bool IsValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoMac.Foundation.Export("isValid")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns <see langword="true" /> if the the timer will still fire at some point in the future.</summary>
        <value>
        </value>
        <remarks>To be added.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TimeInterval">
      <MemberSignature Language="C#" Value="public virtual double TimeInterval { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 TimeInterval" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoMac.Foundation.Export("timeInterval")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The time interval for the timer.</summary>
        <value>
        </value>
        <remarks>Will return 0 for a non-repeating timer.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UserInfo">
      <MemberSignature Language="C#" Value="public virtual MonoMac.Foundation.NSObject UserInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoMac.Foundation.NSObject UserInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoMac.Foundation.Export("userInfo")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoMac.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Custom user information that has been provided to the timer.</summary>
        <value>
        </value>
        <remarks>To be added.
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
