#if MAC && XAMARINMAC

using System;
using AppKit;
using CoreGraphics;
using Foundation;
using ObjCRuntime;

namespace FormsTest
{
	public class UrlProtocol : NSUrlProtocol
	{
		//static NSObject BeingHandledValue = new NSString("YES");
		//static string BeingHandledKey = "BeingHandledByUrlProtocol";
		static Class urlProtocolClass;

		//NSUrlConnection connection;
		NSUrlProtocolClient client;

		public static void Register()
		{
			urlProtocolClass = new Class(typeof(UrlProtocol));
			NSUrlProtocol.RegisterClass(urlProtocolClass);
		}

		public static void Unregister()
		{
			if (urlProtocolClass != null)
				NSUrlProtocol.UnregisterClass(urlProtocolClass);
		}

		[Export("canInitWithRequest:")]
		public static bool canInitWithRequest(NSUrlRequest request)
		{
			return true;// request.Url.Scheme == "custom";
		}

		[Export("canonicalRequestForRequest:")]
		public static new NSUrlRequest GetCanonicalRequest(NSUrlRequest forRequest)
		{
			return forRequest;
		}

		[Export("initWithRequest:cachedResponse:client:")]
		public UrlProtocol(NSUrlRequest request, NSCachedUrlResponse cachedResponse, NSUrlProtocolClient client)
			: base(request, cachedResponse, client)
		{
			this.client = client;
		}

		public override void StartLoading()
		{
			using (var response = new NSUrlResponse(Request.Url, "text/html", -1, null))
			{
				using (var data = NSData.FromString("<html><body><h1>XamUrlProcotol</h1><p>This page was generated by XamUrlProtocol.</p><body></html>"))
				{
					client.ReceivedResponse(this, response, NSUrlCacheStoragePolicy.NotAllowed);
					client.DataLoaded(this, data);
					client.FinishedLoading(this);
				}
			}
		}

		public override void StopLoading()
		{
		}
	}
}

#endif
