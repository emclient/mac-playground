<Type Name="CGPDFArray" FullName="MonoMac.CoreGraphics.CGPDFArray">
  <TypeSignature Language="C#" Value="public class CGPDFArray : MonoMac.ObjCRuntime.INativeObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CGPDFArray extends System.Object implements class MonoMac.ObjCRuntime.INativeObject" />
  <AssemblyInfo>
    <AssemblyName>MonoMac</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>MonoMac.ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Represents a PDF array</summary>
    <remarks>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CGPDFArray (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The number of elements in the PDF array.</summary>
        <value>
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetArray">
      <MemberSignature Language="C#" Value="public bool GetArray (int idx, out MonoMac.CoreGraphics.CGPDFArray array);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool GetArray(int32 idx, class MonoMac.CoreGraphics.CGPDFArray array) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="idx" Type="System.Int32" />
        <Parameter Name="array" Type="MonoMac.CoreGraphics.CGPDFArray&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="idx">Index for the element we want to access.</param>
        <param name="array">If the element at position idx is an array, this will contain the resulting array.</param>
        <summary>Returns the array element in the array at the specified index.</summary>
        <returns>True if the element at the given position is of the specified type and the result is set on the out parameter;   False if you tried to access an out of bounds element, or if the element at that position is of a different type.</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBoolean">
      <MemberSignature Language="C#" Value="public bool GetBoolean (int idx, out bool result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool GetBoolean(int32 idx, bool result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="idx" Type="System.Int32" />
        <Parameter Name="result" Type="System.Boolean&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="idx">Index for the element we want to access.</param>
        <param name="result">If the element at position idx is a boolean, this will contain the resulting value.</param>
        <summary>Returns the boolean element in the array at the specified index.</summary>
        <returns>True if the element at the given position is of the specified type and the result is set on the out parameter;   False if you tried to access an out of bounds element, or if the element at that position is of a different type.</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDictionary">
      <MemberSignature Language="C#" Value="public bool GetDictionary (int idx, out MonoMac.CoreGraphics.CGPDFDictionary result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool GetDictionary(int32 idx, class MonoMac.CoreGraphics.CGPDFDictionary result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="idx" Type="System.Int32" />
        <Parameter Name="result" Type="MonoMac.CoreGraphics.CGPDFDictionary&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="idx">Index for the element we want to access.</param>
        <param name="result">If the element at position idx is a dictionary, this will contain the resulting dictionary.</param>
        <summary>Returns the dictionary element in the array at the specified index.</summary>
        <returns>True if the element at the given position is of the specified type and the result is set on the out parameter;   False if you tried to access an out of bounds element, or if the element at that position is of a different type.</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFloat">
      <MemberSignature Language="C#" Value="public bool GetFloat (int idx, out float result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool GetFloat(int32 idx, float32 result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="idx" Type="System.Int32" />
        <Parameter Name="result" Type="System.Single&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="idx">Index for the element we want to access.</param>
        <param name="result">If the element at position idx is a float value, this will contain the resulting value.</param>
        <summary>Returns the float element in the array at the specified index.</summary>
        <returns>True if the element at the given position is of the specified type and the result is set on the out parameter;   False if you tried to access an out of bounds element, or if the element at that position is of a different type.</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInt">
      <MemberSignature Language="C#" Value="public bool GetInt (int idx, out int result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool GetInt(int32 idx, int32 result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="idx" Type="System.Int32" />
        <Parameter Name="result" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="idx">Index for the element we want to access.</param>
        <param name="result">If the element at position idx is an integer, this will contain the resulting value.</param>
        <summary>Returns the integer element in the array at the specified index.</summary>
        <returns>True if the element at the given position is of the specified type and the result is set on the out parameter;   False if you tried to access an out of bounds element, or if the element at that position is of a different type.</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetName">
      <MemberSignature Language="C#" Value="public bool GetName (int idx, out string result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool GetName(int32 idx, string result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="idx" Type="System.Int32" />
        <Parameter Name="result" Type="System.String&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="idx">Index for the element we want to access.</param>
        <param name="result">If the element at position idx is a name, this will contain the resulting value.</param>
        <summary>Returns the name element in the array at the specified index.</summary>
        <returns>True if the element at the given position is of the specified type and the result is set on the out parameter;   False if you tried to access an out of bounds element, or if the element at that position is of a different type.</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetStream">
      <MemberSignature Language="C#" Value="public bool GetStream (int idx, out MonoMac.CoreGraphics.CGPDFStream result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool GetStream(int32 idx, class MonoMac.CoreGraphics.CGPDFStream result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="idx" Type="System.Int32" />
        <Parameter Name="result" Type="MonoMac.CoreGraphics.CGPDFStream&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="idx">Index for the element we want to access.</param>
        <param name="result">If the element at position idx is a PDF stream, this will contain the resulting stream.</param>
        <summary>Returns the PDF element in the array at the specified index.</summary>
        <returns>True if the element at the given position is of the specified type and the result is set on the out parameter;   False if you tried to access an out of bounds element, or if the element at that position is of a different type.</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public bool GetString (int idx, out string result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool GetString(int32 idx, string result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="idx" Type="System.Int32" />
        <Parameter Name="result" Type="System.String&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="idx">Index for the element we want to access.</param>
        <param name="result">If the element at position idx is a string, this will contain the resulting value.</param>
        <summary>Returns the string element in the array at the specified index.</summary>
        <returns>True if the element at the given position is of the specified type and the result is set on the out parameter;   False if you tried to access an out of bounds element, or if the element at that position is of a different type.</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Handle (pointer) to the unmanaged object representation.</summary>
        <value>A pointer</value>
        <remarks>This IntPtr is a handle to the underlying unmanaged representation for this object.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
