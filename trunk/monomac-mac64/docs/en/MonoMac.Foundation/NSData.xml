<Type Name="NSData" FullName="MonoMac.Foundation.NSData">
  <TypeSignature Language="C#" Value="public class NSData : MonoMac.Foundation.NSObject, System.Collections.Generic.IEnumerable&lt;byte&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NSData extends MonoMac.Foundation.NSObject implements class System.Collections.Generic.IEnumerable`1&lt;unsigned int8&gt;, class System.Collections.IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>MonoMac</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoMac.Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.Byte&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>MonoMac.Foundation.Register("NSData", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Byte buffer manipulation.</summary>
    <remarks>This wraps a byte array, this is the way that CocoaTouch represents strongly-typed byte-arrays and is consumed by various CocoaTouch APIs.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSData ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor that initializes a new instance of this class with no parameters.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSData (MonoMac.Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoMac.Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="MonoMac.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSData (MonoMac.Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoMac.Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="MonoMac.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes when the derived class has an [Export] constructor.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they are initialized using an [Export] attribute. The argument value is ignore, typically the chaining would look like this:</para>
          <example>
            <code lang="C#">
public class MyClass : BaseClass {
    [Export ("initWithFoo:")]
    public MyClass (string foo) : base (NSObjectFlag.Empty)
    {
        ...
    }
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSData (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:MonoMac.ObjCRuntime.GetNSObject (System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="_Save">
      <MemberSignature Language="C#" Value="public virtual bool _Save (MonoMac.Foundation.NSUrl url, int options, IntPtr addr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool _Save(class MonoMac.Foundation.NSUrl url, int32 options, native int addr) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("writeToURL:options:error:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="MonoMac.Foundation.NSUrl" />
        <Parameter Name="options" Type="System.Int32" />
        <Parameter Name="addr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="url">To be added.</param>
        <param name="options">To be added.</param>
        <param name="addr">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="_Save">
      <MemberSignature Language="C#" Value="public virtual bool _Save (string file, int options, IntPtr addr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool _Save(string file, int32 options, native int addr) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("writeToFile:options:error:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="options" Type="System.Int32" />
        <Parameter Name="addr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="file">To be added.</param>
        <param name="options">To be added.</param>
        <param name="addr">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsStream">
      <MemberSignature Language="C#" Value="public virtual System.IO.Stream AsStream ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IO.Stream AsStream() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wraps the NSData into System.IO.Stream</summary>
        <returns>
        </returns>
        <remarks>Call Dispose on the returned Stream to release the reference to this NSData.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Bytes">
      <MemberSignature Language="C#" Value="public virtual IntPtr Bytes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Bytes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoMac.Foundation.Export("bytes")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns a pointer to the data held by this NSData.</summary>
        <value>
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each MonoMac class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public virtual MonoMac.Foundation.NSRange Find (MonoMac.Foundation.NSData dataToFind, MonoMac.Foundation.NSDataSearchOptions searchOptions, MonoMac.Foundation.NSRange searchRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype MonoMac.Foundation.NSRange Find(class MonoMac.Foundation.NSData dataToFind, valuetype MonoMac.Foundation.NSDataSearchOptions searchOptions, valuetype MonoMac.Foundation.NSRange searchRange) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("rangeOfData:options:range:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoMac.Foundation.NSRange</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataToFind" Type="MonoMac.Foundation.NSData" />
        <Parameter Name="searchOptions" Type="MonoMac.Foundation.NSDataSearchOptions" />
        <Parameter Name="searchRange" Type="MonoMac.Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="dataToFind">NSData to look for.</param>
        <param name="searchOptions">Parameters to the search.</param>
        <param name="searchRange">Range to search</param>
        <summary>Looks for the dataToFind in this NSData, based on the specified searchOptions in the specified range.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromArray">
      <MemberSignature Language="C#" Value="public static MonoMac.Foundation.NSData FromArray (byte[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoMac.Foundation.NSData FromArray(unsigned int8[] buffer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.Foundation.NSData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="buffer">C# Byte array containing the data to wrap.</param>
        <summary>Creates an NSData that wraps a managed C# byte array.</summary>
        <returns>Newly created NSData object wrapping the contents of the array.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromBytes">
      <MemberSignature Language="C#" Value="public static MonoMac.Foundation.NSData FromBytes (IntPtr bytes, uint size);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoMac.Foundation.NSData FromBytes(native int bytes, unsigned int32 size) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("dataWithBytes:length:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoMac.Foundation.NSData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.IntPtr" />
        <Parameter Name="size" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="bytes">Pointer to a block of data in memory.</param>
        <param name="size">The size of the block that you want to wrap</param>
        <summary>Creates an NSData from an in-memory block by specifying its address and length.</summary>
        <returns>Newly created NSData object wrapping the buffer.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromFile">
      <MemberSignature Language="C#" Value="public static MonoMac.Foundation.NSData FromFile (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoMac.Foundation.NSData FromFile(string path) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("dataWithContentsOfFile:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoMac.Foundation.NSData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Path to the filename to wrap as an NSData.</param>
        <summary>Creates an NSData by loading the contents of the specified file into memory.</summary>
        <returns>Newly created NSData object exposing the contents of the file, or null on error.</returns>
        <remarks>This version of FromFile loads the contents of the file into memory on startup, use the <see cref="M:MonoMac.Foundation.NSData.FromFile(string,MonoMac.Foundation.NSDataReadingOptions,MonoMac.Foundation.Error)" /> to use mmap.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromFile">
      <MemberSignature Language="C#" Value="public static MonoMac.Foundation.NSData FromFile (string path, MonoMac.Foundation.NSDataReadingOptions mask, out MonoMac.Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoMac.Foundation.NSData FromFile(string path, valuetype MonoMac.Foundation.NSDataReadingOptions mask, class MonoMac.Foundation.NSError error) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("dataWithContentsOfFile:options:error:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoMac.Foundation.NSData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="mask" Type="MonoMac.Foundation.NSDataReadingOptions" />
        <Parameter Name="error" Type="MonoMac.Foundation.NSError&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="path">Path to the filename to wrap as an NSData.</param>
        <param name="mask">Options can be used to control the file loading, can be used to force the file to be mapped into the VM, instead of loaded by reading the contents.</param>
        <param name="error">Returns the error on failure.</param>
        <summary>Creates an NSData by loading the contents of the specified file into memory.</summary>
        <returns>Newly created NSData object exposing the contents of the file, or null on error.</returns>
        <remarks>
          <para>
	    By default NSData will loads the contents of the file in memory
	    by allocating a block of memory and then reading the contents of
	    the file into it.
	  </para>
          <para>

	    The Mapped and MappedAlways parameter instruct NSData to use
	    the kernel's interface to map the file into the process
	    address space.  This has a few advantages: instead of
	    allocating read/write memory for the process, that becomes
	    real memory usage, the mapped versions map the file into
	    memory which means that the data is loaded on demand instead
	    of being loaded upfront.  This also allows the kernel to
	    discard the data loaded from memory when the system is running
	    low on memory. 
	  </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromStream">
      <MemberSignature Language="C#" Value="public static MonoMac.Foundation.NSData FromStream (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoMac.Foundation.NSData FromStream(class System.IO.Stream stream) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.Foundation.NSData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">System.IO.Stream to wrap as an NSData.</param>
        <summary>Creates an NSData by loading the contents of the provided stream.</summary>
        <returns>Newly created NSData, or null if it the stream does not support reading or the stream throws an exception.</returns>
        <remarks>This method will load the contents of the stream starting at the current location in the stream.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromString">
      <MemberSignature Language="C#" Value="public static MonoMac.Foundation.NSData FromString (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoMac.Foundation.NSData FromString(string s) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.Foundation.NSData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">String to wrap.</param>
        <summary>Creates an NSData for a C# string, the string is encoded in UTF8.</summary>
        <returns>Newly creates NSData.</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromString">
      <MemberSignature Language="C#" Value="public static MonoMac.Foundation.NSData FromString (string s, MonoMac.Foundation.NSStringEncoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoMac.Foundation.NSData FromString(string s, valuetype MonoMac.Foundation.NSStringEncoding encoding) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.Foundation.NSData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="encoding" Type="MonoMac.Foundation.NSStringEncoding" />
      </Parameters>
      <Docs>
        <param name="s">String to wrap.</param>
        <param name="encoding">Encoding to use.</param>
        <summary>Creates an NSData for a C# string, the string is encoded using the specified encoding.</summary>
        <returns>Newly creates NSData.</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromUrl">
      <MemberSignature Language="C#" Value="public static MonoMac.Foundation.NSData FromUrl (MonoMac.Foundation.NSUrl url);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoMac.Foundation.NSData FromUrl(class MonoMac.Foundation.NSUrl url) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("dataWithContentsOfURL:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoMac.Foundation.NSData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="MonoMac.Foundation.NSUrl" />
      </Parameters>
      <Docs>
        <param name="url">Url pointing to the resource to load into NSData.</param>
        <summary>Cretes an NSData with the contents in the specified url.</summary>
        <returns>Newly creates NSData, or null on error.</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromUrl">
      <MemberSignature Language="C#" Value="public static MonoMac.Foundation.NSData FromUrl (MonoMac.Foundation.NSUrl url, MonoMac.Foundation.NSDataReadingOptions mask, out MonoMac.Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoMac.Foundation.NSData FromUrl(class MonoMac.Foundation.NSUrl url, valuetype MonoMac.Foundation.NSDataReadingOptions mask, class MonoMac.Foundation.NSError error) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("dataWithContentsOfURL:options:error:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoMac.Foundation.NSData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="MonoMac.Foundation.NSUrl" />
        <Parameter Name="mask" Type="MonoMac.Foundation.NSDataReadingOptions" />
        <Parameter Name="error" Type="MonoMac.Foundation.NSError&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="url">Url pointing to the resource to load into NSData.</param>
        <param name="mask">Options can be used to control the file loading, can be used to force the file to be mapped into the VM, instead of loaded by reading the contents.</param>
        <param name="error">Returns the error on failure.</param>
        <summary>Cretes an NSData with the contents in the specified url.</summary>
        <returns>Newly creates NSData, or null on error.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual byte this[int idx] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8 Item(int32)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="idx" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="idx">Index into the NSData.</param>
        <summary>Retrieves the byte at the specified position in the NSData object.</summary>
        <value>The value at that position, or an exception if you try to access data beyond its boundaries.</value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public virtual uint Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int32 Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoMac.Foundation.Export("length")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The size of the contents wrapped by this NSData.</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static MonoMac.Foundation.NSData op_Implicit (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class MonoMac.Foundation.NSData op_Implicit(string s) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.Foundation.NSData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">String to convert.</param>
        <summary>Implicit conversion from string to an NSData encoded as UTF8.</summary>
        <returns>
        </returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public bool Save (MonoMac.Foundation.NSUrl url, bool auxiliaryFile, out MonoMac.Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Save(class MonoMac.Foundation.NSUrl url, bool auxiliaryFile, class MonoMac.Foundation.NSError error) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="MonoMac.Foundation.NSUrl" />
        <Parameter Name="auxiliaryFile" Type="System.Boolean" />
        <Parameter Name="error" Type="MonoMac.Foundation.NSError&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="url">To be added.</param>
        <param name="auxiliaryFile">To be added.</param>
        <param name="error">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public bool Save (string file, MonoMac.Foundation.NSDataWritingOptions options, out MonoMac.Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Save(string file, valuetype MonoMac.Foundation.NSDataWritingOptions options, class MonoMac.Foundation.NSError error) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="options" Type="MonoMac.Foundation.NSDataWritingOptions" />
        <Parameter Name="error" Type="MonoMac.Foundation.NSError&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="file">To be added.</param>
        <param name="options">To be added.</param>
        <param name="error">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public bool Save (string file, bool auxiliaryFile, out MonoMac.Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Save(string file, bool auxiliaryFile, class MonoMac.Foundation.NSError error) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="auxiliaryFile" Type="System.Boolean" />
        <Parameter Name="error" Type="MonoMac.Foundation.NSError&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="file">To be added.</param>
        <param name="auxiliaryFile">To be added.</param>
        <param name="error">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;System.Byte&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;byte&gt; IEnumerable&lt;byte&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;unsigned int8&gt; System.Collections.Generic.IEnumerable&lt;byte&gt;.GetEnumerator() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Enumerator for the NSDatac contents.</summary>
        <returns>
        </returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Enumerator for the NSDatac contents.</summary>
        <returns>
        </returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a string representation of the value of the current instance.</summary>
        <returns>
        </returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public MonoMac.Foundation.NSString ToString (MonoMac.Foundation.NSStringEncoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class MonoMac.Foundation.NSString ToString(valuetype MonoMac.Foundation.NSStringEncoding encoding) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.Foundation.NSString</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encoding" Type="MonoMac.Foundation.NSStringEncoding" />
      </Parameters>
      <Docs>
        <param name="encoding">The encoding to use to convert the contents.</param>
        <summary>Returns a string representation of the value of the current instance.</summary>
        <returns>
        </returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
