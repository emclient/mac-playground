<Type Name="NSMutableAttributedString" FullName="MonoMac.Foundation.NSMutableAttributedString">
  <TypeSignature Language="C#" Value="public class NSMutableAttributedString : MonoMac.Foundation.NSAttributedString" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NSMutableAttributedString extends MonoMac.Foundation.NSAttributedString" />
  <AssemblyInfo>
    <AssemblyName>MonoMac</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoMac.Foundation.NSAttributedString</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>MonoMac.Foundation.Register("NSMutableAttributedString", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Mutable strings that can be annotated with a set of attributes.</summary>
    <remarks>
      <para>

	The NSMutableAttributedString holds a mutable string that can
	has a series of overlapping attributes applied to ranges of
	the string.

      </para>
      <para>
        <img href="NSMutableAttributedString.png" />&gt;
      </para>
      <para>

	Unlike the <see cref="T:MonoMac.Foundation.NSAttributedString" /> both the
	contents of the string as well as the attributes applied to it
	can be changed after the string has been constructed.

      </para>
      <para> 
	These types typically are used to attach information to
	elements of the string that dictate the font and colors to use
	as well as rendering attributes like kerning or how to render
	ligatures on a specific run of code.
      </para>
      <para> These classes do not dictate the meaning or behavior of
	the attributes on a string, they merely keep track of the
	attributes.  The actual meaning of these attributes is
	interpreted by the consumer of these objects.   
      </para>
      <para> If you are performing multiple changes to an
	NSMutableAttributedString, you can optimize the performance by
	surrounding your changes with calls to <see cref="M:MonoMac.Foundation.BeginEditing()" /> and <see cref="M:MonoMac.Foundation.EndEditing()" />.  This will
	prevent the internal data structures to be updated on every
	change and delay the internal changes until the <see cref="M:MonoMac.Foundation.EndEditing()" /> method is called.
	</para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSMutableAttributedString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor that initializes a new instance of this class with no parameters.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSMutableAttributedString (MonoMac.Foundation.NSAttributedString other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoMac.Foundation.NSAttributedString other) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("initWithAttributedString:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="other" Type="MonoMac.Foundation.NSAttributedString" />
      </Parameters>
      <Docs>
        <param name="other">The source attributed string.</param>
        <summary>Creates a NSMutableAttributedString from a NSAttributedString.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSMutableAttributedString (MonoMac.Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoMac.Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="MonoMac.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSMutableAttributedString (MonoMac.Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoMac.Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="MonoMac.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes when the derived class has an [Export] constructor.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they are initialized using an [Export] attribute. The argument value is ignore, typically the chaining would look like this:</para>
          <example>
            <code lang="C#">
public class MyClass : BaseClass {
    [Export ("initWithFoo:")]
    public MyClass (string foo) : base (NSObjectFlag.Empty)
    {
        ...
    }
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSMutableAttributedString (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:MonoMac.ObjCRuntime.GetNSObject (System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSMutableAttributedString (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string str) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("initWithString:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">C# String</param>
        <summary>Creates an NSMutableAttributedString from a C# string, with no attributes attached to it.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSMutableAttributedString (string str, MonoMac.CoreText.CTStringAttributes attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string str, class MonoMac.CoreText.CTStringAttributes attributes) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="attributes" Type="MonoMac.CoreText.CTStringAttributes" />
      </Parameters>
      <Docs>
        <param name="str">C# string.</param>
        <param name="attributes">CoreText attributes to be applied to the string.</param>
        <summary>Creates an NSMutableAttributedString from a C# string and applies the specified CoreText attributes to the entire string.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSMutableAttributedString (string str, MonoMac.Foundation.NSDictionary attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string str, class MonoMac.Foundation.NSDictionary attributes) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("initWithString:attributes:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="attributes" Type="MonoMac.Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="str">C# string.</param>
        <param name="attributes">User-defined attributes as key/value pair dictionary.</param>
        <summary>Creates an NSMutableAttributedString from a C# string and applies the attributes contained in the NSDictionary to the entire string.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddAttribute (MonoMac.Foundation.NSString attributeName, MonoMac.Foundation.NSObject value, MonoMac.Foundation.NSRange range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAttribute(class MonoMac.Foundation.NSString attributeName, class MonoMac.Foundation.NSObject value, valuetype MonoMac.Foundation.NSRange range) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("addAttribute:value:range:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeName" Type="MonoMac.Foundation.NSString" />
        <Parameter Name="value" Type="MonoMac.Foundation.NSObject" />
        <Parameter Name="range" Type="MonoMac.Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="attributeName">Attribute name (for example, "color")</param>
        <param name="value">Attribute value (for example "blue").</param>
        <param name="range">Range to which the attribute will be applied.</param>
        <summary>Adds an attribute and its value to the specified range of characters in the string.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAttributes">
      <MemberSignature Language="C#" Value="public void AddAttributes (MonoMac.CoreText.CTStringAttributes attrs, MonoMac.Foundation.NSRange range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAttributes(class MonoMac.CoreText.CTStringAttributes attrs, valuetype MonoMac.Foundation.NSRange range) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attrs" Type="MonoMac.CoreText.CTStringAttributes" />
        <Parameter Name="range" Type="MonoMac.Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="attrs">The CoreText attributes to add.</param>
        <param name="range">Range to which the attribute will be applied.</param>
        <summary>Adds an attribute and its value to the specified range of characters in the string.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAttributes">
      <MemberSignature Language="C#" Value="public virtual void AddAttributes (MonoMac.Foundation.NSDictionary attrs, MonoMac.Foundation.NSRange range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAttributes(class MonoMac.Foundation.NSDictionary attrs, valuetype MonoMac.Foundation.NSRange range) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("addAttributes:range:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attrs" Type="MonoMac.Foundation.NSDictionary" />
        <Parameter Name="range" Type="MonoMac.Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="attrs">User-defined attributes as key/value pair dictionary.</param>
        <param name="range">Range to which the attribute will be applied.</param>
        <summary>Adds the specified attributes in the dictionary to the specified range of characters in the string.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public virtual void Append (MonoMac.Foundation.NSAttributedString attrString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Append(class MonoMac.Foundation.NSAttributedString attrString) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("appendAttributedString:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attrString" Type="MonoMac.Foundation.NSAttributedString" />
      </Parameters>
      <Docs>
        <param name="attrString">The attributed string to append.</param>
        <summary>Appends an attributed string to this string.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public void Append (MonoMac.Foundation.NSAttributedString first, object[] rest);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Append(class MonoMac.Foundation.NSAttributedString first, object[] rest) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="first" Type="MonoMac.Foundation.NSAttributedString" />
        <Parameter Name="rest" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="first">To be added.</param>
        <param name="rest">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginEditing">
      <MemberSignature Language="C#" Value="public virtual void BeginEditing ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginEditing() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("beginEditing")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Marks the beginning of changes.</summary>
        <remarks>
	  You can invoke this method before you make a series of changes to a NSMutableAttributedString to inform the class that you will be making more than one change and that it does not need to compute any expensive internal data structures on each end.   The internal data structures will all be updated when you call the <see cref="M:MonoMac.Foundation.EndEditing()" /></remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each MonoMac class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteRange">
      <MemberSignature Language="C#" Value="public virtual void DeleteRange (MonoMac.Foundation.NSRange range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DeleteRange(valuetype MonoMac.Foundation.NSRange range) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("deleteCharactersInRange:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="range" Type="MonoMac.Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="range">Range to delete.</param>
        <summary>Removes the characters in the specified range.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndEditing">
      <MemberSignature Language="C#" Value="public virtual void EndEditing ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndEditing() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("endEditing")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Marks the end of changes.</summary>
        <remarks>You should invoke this method after you have made a series of changes to a NSMutableAttributedString to inform the class that you are done making changes and it can perform its internal book keeping.   This is called after you called <see cref="M:MonoMac.Foundation.BeginEditing()" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public virtual void Insert (MonoMac.Foundation.NSAttributedString attrString, int location);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Insert(class MonoMac.Foundation.NSAttributedString attrString, int32 location) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("insertAttributedString:atIndex:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attrString" Type="MonoMac.Foundation.NSAttributedString" />
        <Parameter Name="location" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="attrString">Attributed string to insert.</param>
        <param name="location">Location where the string will be inserted.</param>
        <summary>Inserts an attributed string into the current string.</summary>
        <remarks>Any attributes that spanned the insertion point will be expanded, so they will continue to cover both the original text as well as the new text.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAttribute">
      <MemberSignature Language="C#" Value="public virtual void RemoveAttribute (string name, MonoMac.Foundation.NSRange range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAttribute(string name, valuetype MonoMac.Foundation.NSRange range) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("removeAttribute:range:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="range" Type="MonoMac.Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="name">Name of the attribute to remove.</param>
        <param name="range">Range where the attribute will be removed.</param>
        <summary>Removes the specified attribute from the range of characters</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public virtual void Replace (MonoMac.Foundation.NSRange range, MonoMac.Foundation.NSAttributedString value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Replace(valuetype MonoMac.Foundation.NSRange range, class MonoMac.Foundation.NSAttributedString value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("replaceCharactersInRange:withAttributedString:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="range" Type="MonoMac.Foundation.NSRange" />
        <Parameter Name="value" Type="MonoMac.Foundation.NSAttributedString" />
      </Parameters>
      <Docs>
        <param name="range">Range of characters that will be replaced.</param>
        <param name="value">Strings that will be inserted to replace the range of characters.</param>
        <summary>Replaces the specified range of characters with an attributed string.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public virtual void Replace (MonoMac.Foundation.NSRange range, string newValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Replace(valuetype MonoMac.Foundation.NSRange range, string newValue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("replaceCharactersInRange:withString:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="range" Type="MonoMac.Foundation.NSRange" />
        <Parameter Name="newValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="range">Range of characters that will be replaced.</param>
        <param name="newValue">Strings that will be inserted to replace the range of characters.</param>
        <summary>Replaces the specified range of characters with an attributed string.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAttributes">
      <MemberSignature Language="C#" Value="public void SetAttributes (MonoMac.CoreText.CTStringAttributes attrs, MonoMac.Foundation.NSRange range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAttributes(class MonoMac.CoreText.CTStringAttributes attrs, valuetype MonoMac.Foundation.NSRange range) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attrs" Type="MonoMac.CoreText.CTStringAttributes" />
        <Parameter Name="range" Type="MonoMac.Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="attrs">CoreText attributes to be set on the string.</param>
        <param name="range">Range to which the attribute will be applied.</param>
        <summary>Sets the attributes for the specified ranges.  Any previous attributes in that range are replaces with the new values.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAttributes">
      <MemberSignature Language="C#" Value="public virtual void SetAttributes (MonoMac.Foundation.NSDictionary attrs, MonoMac.Foundation.NSRange range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetAttributes(class MonoMac.Foundation.NSDictionary attrs, valuetype MonoMac.Foundation.NSRange range) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("setAttributes:range:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attrs" Type="MonoMac.Foundation.NSDictionary" />
        <Parameter Name="range" Type="MonoMac.Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="attrs">Dictionary of attributes to be set on the string.</param>
        <param name="range">Range to which the attribute will be applied.</param>
        <summary>Sets the attributes for the specified ranges.  Any previous attributes in that range are replaces with the new values.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetString">
      <MemberSignature Language="C#" Value="public virtual void SetString (MonoMac.Foundation.NSAttributedString attrString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetString(class MonoMac.Foundation.NSAttributedString attrString) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("setAttributedString:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attrString" Type="MonoMac.Foundation.NSAttributedString" />
      </Parameters>
      <Docs>
        <param name="attrString">The new attributed string to set the contents to</param>
        <summary>Sets the contents of this NSMutableAttributedString to the value specified.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
