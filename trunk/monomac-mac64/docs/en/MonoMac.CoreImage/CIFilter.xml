<Type Name="CIFilter" FullName="MonoMac.CoreImage.CIFilter">
  <TypeSignature Language="C#" Value="public class CIFilter : MonoMac.Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CIFilter extends MonoMac.Foundation.NSObject" />
  <AssemblyInfo>
    <AssemblyName>MonoMac</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoMac.Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>MonoMac.Foundation.Register("CIFilter", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>CoreImage image filter.</summary>
    <remarks>
      <para>

	On iOS 5.0, the following are the built-in filters:

	<see cref="T:MonoMac.CoreImage.CICategoryBlur" />, <see cref="T:MonoMac.CoreImage.CICategoryColorEffect" />,
	<see cref="T:MonoMac.CoreImage.CIAdditionCompositing" />,
	<see cref="T:MonoMac.CoreImage.CIAffineTransform" />,
	<see cref="T:MonoMac.CoreImage.CICheckerboardGenerator" />,
	<see cref="T:MonoMac.CoreImage.CIColorBlendMode" />,
	<see cref="T:MonoMac.CoreImage.CIColorBurnBlendMode" />,
	<see cref="T:MonoMac.CoreImage.CIColorControls" />,
	<see cref="T:MonoMac.CoreImage.CIColorCube" />,
	<see cref="T:MonoMac.CoreImage.CIColorDodgeBlendMode" />,
	<see cref="T:MonoMac.CoreImage.CIColorInvert" />,
	<see cref="T:MonoMac.CoreImage.CIColorMatrix" />,
	<see cref="T:MonoMac.CoreImage.CIColorMonochrome" />,
	<see cref="T:MonoMac.CoreImage.CIConstantColorGenerator" />,
	<see cref="T:MonoMac.CoreImage.CICrop" />,
	<see cref="T:MonoMac.CoreImage.CIDarkenBlendMode" />,
	<see cref="T:MonoMac.CoreImage.CIDifferenceBlendMode" />,
	<see cref="T:MonoMac.CoreImage.CIExclusionBlendMode" />,
	<see cref="T:MonoMac.CoreImage.CIExposureAdjust" />,
	<see cref="T:MonoMac.CoreImage.CIFalseColor" />,
	<see cref="T:MonoMac.CoreImage.CIGammaAdjust" />,
	<see cref="T:MonoMac.CoreImage.CIGaussianGradient" />,
	<see cref="T:MonoMac.CoreImage.CIHardLightBlendMode" />,
	<see cref="T:MonoMac.CoreImage.CIHighlightShadowAdjust" />,
	<see cref="T:MonoMac.CoreImage.CIHueAdjust" />,
	<see cref="T:MonoMac.CoreImage.CIHueBlendMode" />,
	<see cref="T:MonoMac.CoreImage.CILightenBlendMode" />,
	<see cref="T:MonoMac.CoreImage.CILinearGradient" />,
	<see cref="T:MonoMac.CoreImage.CILuminosityBlendMode" />,
	<see cref="T:MonoMac.CoreImage.CIMaximumCompositing" />,
	<see cref="T:MonoMac.CoreImage.CIMinimumCompositing" />,
	<see cref="T:MonoMac.CoreImage.CIMultiplyBlendMode" />,
	<see cref="T:MonoMac.CoreImage.CIMultiplyCompositing" />,
	<see cref="T:MonoMac.CoreImage.CIOverlayBlendMode" />,
	<see cref="T:MonoMac.CoreImage.CIRadialGradient" />,
	<see cref="T:MonoMac.CoreImage.CISaturationBlendMode" />,
	<see cref="T:MonoMac.CoreImage.CIScreenBlendMode" />,
	<see cref="T:MonoMac.CoreImage.CISepiaTone" />,
	<see cref="T:MonoMac.CoreImage.CISoftLightBlendMode" />,
	<see cref="T:MonoMac.CoreImage.CISourceAtopCompositing" />,
	<see cref="T:MonoMac.CoreImage.CISourceInCompositing" />,
	<see cref="T:MonoMac.CoreImage.CISourceOutCompositing" />,
	<see cref="T:MonoMac.CoreImage.CISourceOverCompositing" />,
	<see cref="T:MonoMac.CoreImage.CIStraightenFilter" />,
	<see cref="T:MonoMac.CoreImage.CIStripesGenerator" />,
	<see cref="T:MonoMac.CoreImage.CITemperatureAndTint" />,
	<see cref="T:MonoMac.CoreImage.CIToneCurve" />,
	<see cref="T:MonoMac.CoreImage.CIVibrance" />,
	<see cref="T:MonoMac.CoreImage.CIVignette" /> and <see cref="T:MonoMac.CoreImage.CIWhitePointAdjust" />.

      </para>
      <para>

	To create a filter of the specified type, instantiate an
	instance of one of the above types, assign values to their
	properties and extract the result by using the OutputImage
	property.

      </para>
      <example>
        <code lang="C#">
var sepiaFilter = new CISepiaTone () {
	Image = mySourceImage,
	Intensity = 0.8f
};
	</code>
      </example>
      <para>
	You can chain your filters as well:
      </para>
      <example>
        <code lang="C#">
var sepiaFilter = new CISepiaTone () {
	Image = mySourceImage,
	Intensity = .8f
};
var invert = new CIColorInvert () {
	Image = sepia.OutputImage
};
        </code>
      </example>
    </remarks>
    <related type="sample" href="http://samples.xamarin.com/Samples/ByGuid?guid=e2a0ccca-ab10-4e41-9c09-11831a8c1380">coreimage</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CIFilter (MonoMac.Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoMac.Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="MonoMac.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CIFilter (MonoMac.Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoMac.Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="MonoMac.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes when the derived class has an [Export] constructor.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they are initialized using an [Export] attribute. The argument value is ignore, typically the chaining would look like this:</para>
          <example>
            <code lang="C#">
public class MyClass : BaseClass {
    [Export ("initWithFoo:")]
    public MyClass (string foo) : base (NSObjectFlag.Empty)
    {
        ...
    }
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CIFilter (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:MonoMac.ObjCRuntime.GetNSObject (System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Apply">
      <MemberSignature Language="C#" Value="public virtual MonoMac.CoreImage.CIImage Apply (MonoMac.CoreImage.CIKernel k, MonoMac.Foundation.NSArray args, MonoMac.Foundation.NSDictionary options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoMac.CoreImage.CIImage Apply(class MonoMac.CoreImage.CIKernel k, class MonoMac.Foundation.NSArray args, class MonoMac.Foundation.NSDictionary options) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("apply:arguments:options:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoMac.CoreImage.CIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="k" Type="MonoMac.CoreImage.CIKernel" />
        <Parameter Name="args" Type="MonoMac.Foundation.NSArray" />
        <Parameter Name="options" Type="MonoMac.Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="k">To be added.</param>
        <param name="args">To be added.</param>
        <param name="options">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public virtual MonoMac.Foundation.NSDictionary Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoMac.Foundation.NSDictionary Attributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoMac.Foundation.Export("attributes")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoMac.Foundation.NSDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Configurable attributes of the filter.</summary>
        <value>To be added.</value>
        <remarks>
          <para>

	    Each filter has a set of attributes that control it.  You can
	    get this list by requesting the Attributes dictionary from the
	    filter.  Each fitler, in addition to having a series of
	    configurable properties always includes its name
	    ("CIAttributeFilterName" key), a user friendly name
	    ("CIAttributeFilterDisplayName" key) and a list of categories
	    that this filter belongs to ("CIAttributeFilterCategories").   

	  </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CategoryLocalizedName">
      <MemberSignature Language="C#" Value="public static string CategoryLocalizedName (string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string CategoryLocalizedName(string category) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("localizedNameForCategory:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="category">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each MonoMac class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <para>If set to <see langword="true" />, the method is invoked directly and will dispose manage and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
        </param>
        <summary>Releases the resources used by the CIFilter object.</summary>
        <remarks>
          <para>This Dispose method releases the resources used by the CIFilter class.</para>
          <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposting <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
          <para>Calling the Dispose method when you are finished using the CIFilter ensures that all external resources used by this managed object are released as soon as possible.  Once you have invoked the Dispose method, the object is no longer useful and you should no longer make any calls to it.</para>
          <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at http://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterLocalizedDescription">
      <MemberSignature Language="C#" Value="public static string FilterLocalizedDescription (string filterName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string FilterLocalizedDescription(string filterName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("localizedDescriptionForFilterName:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filterName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filterName">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterLocalizedName">
      <MemberSignature Language="C#" Value="public static string FilterLocalizedName (string filterName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string FilterLocalizedName(string filterName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("localizedNameForFilterName:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filterName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filterName">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterLocalizedReferenceDocumentation">
      <MemberSignature Language="C#" Value="public static MonoMac.Foundation.NSUrl FilterLocalizedReferenceDocumentation (string filterName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoMac.Foundation.NSUrl FilterLocalizedReferenceDocumentation(string filterName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("localizedReferenceDocumentationForFilterName:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoMac.Foundation.NSUrl</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filterName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filterName">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterNamesInCategories">
      <MemberSignature Language="C#" Value="public static string[] FilterNamesInCategories (string[] categories);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] FilterNamesInCategories(string[] categories) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="categories" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="categories">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterNamesInCategory">
      <MemberSignature Language="C#" Value="public static string[] FilterNamesInCategory (string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] FilterNamesInCategory(string category) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("filterNamesInCategory:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="category">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromName">
      <MemberSignature Language="C#" Value="public static MonoMac.CoreImage.CIFilter FromName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoMac.CoreImage.CIFilter FromName(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("filterWithName:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoMac.CoreImage.CIFilter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The name of the CoreImage filter to instantiate.</param>
        <summary>Returns a CIFilter for the specific effect.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
	    
	    On iOS 5.0, the following are the built-in filters:
	    <see cref="T:MonoMac.CoreImage.CICategoryBlur" />, <see cref="T:MonoMac.CoreImage.CICategoryColorEffect" />,
	    <see cref="T:MonoMac.CoreImage.CIAdditionCompositing" />,
	    <see cref="T:MonoMac.CoreImage.CIAffineTransform" />,
	    <see cref="T:MonoMac.CoreImage.CICheckerboardGenerator" />,
	    <see cref="T:MonoMac.CoreImage.CIColorBlendMode" />,
	    <see cref="T:MonoMac.CoreImage.CIColorBurnBlendMode" />,
	    <see cref="T:MonoMac.CoreImage.CIColorControls" />,
	    <see cref="T:MonoMac.CoreImage.CIColorCube" />,
	    <see cref="T:MonoMac.CoreImage.CIColorDodgeBlendMode" />,
	    <see cref="T:MonoMac.CoreImage.CIColorInvert" />,
	    <see cref="T:MonoMac.CoreImage.CIColorMatrix" />,
	    <see cref="T:MonoMac.CoreImage.CIColorMonochrome" />,
	    <see cref="T:MonoMac.CoreImage.CIConstantColorGenerator" />,
	    <see cref="T:MonoMac.CoreImage.CICrop" />,
	    <see cref="T:MonoMac.CoreImage.CIDarkenBlendMode" />,
	    <see cref="T:MonoMac.CoreImage.CIDifferenceBlendMode" />,
	    <see cref="T:MonoMac.CoreImage.CIExclusionBlendMode" />,
	    <see cref="T:MonoMac.CoreImage.CIExposureAdjust" />,
	    <see cref="T:MonoMac.CoreImage.CIFalseColor" />,
	    <see cref="T:MonoMac.CoreImage.CIGammaAdjust" />,
	    <see cref="T:MonoMac.CoreImage.CIGaussianGradient" />,
	    <see cref="T:MonoMac.CoreImage.CIHardLightBlendMode" />,
	    <see cref="T:MonoMac.CoreImage.CIHighlightShadowAdjust" />,
	    <see cref="T:MonoMac.CoreImage.CIHueAdjust" />,
	    <see cref="T:MonoMac.CoreImage.CIHueBlendMode" />,
	    <see cref="T:MonoMac.CoreImage.CILightenBlendMode" />,
	    <see cref="T:MonoMac.CoreImage.CILinearGradient" />,
	    <see cref="T:MonoMac.CoreImage.CILuminosityBlendMode" />,
	    <see cref="T:MonoMac.CoreImage.CIMaximumCompositing" />,
	    <see cref="T:MonoMac.CoreImage.CIMinimumCompositing" />,
	    <see cref="T:MonoMac.CoreImage.CIMultiplyBlendMode" />,
	    <see cref="T:MonoMac.CoreImage.CIMultiplyCompositing" />,
	    <see cref="T:MonoMac.CoreImage.CIOverlayBlendMode" />,
	    <see cref="T:MonoMac.CoreImage.CIRadialGradient" />,
	    <see cref="T:MonoMac.CoreImage.CISaturationBlendMode" />,
	    <see cref="T:MonoMac.CoreImage.CIScreenBlendMode" />,
	    <see cref="T:MonoMac.CoreImage.CISepiaTone" />,
	    <see cref="T:MonoMac.CoreImage.CISoftLightBlendMode" />,
	    <see cref="T:MonoMac.CoreImage.CISourceAtopCompositing" />,
	    <see cref="T:MonoMac.CoreImage.CISourceInCompositing" />,
	    <see cref="T:MonoMac.CoreImage.CISourceOutCompositing" />,
	    <see cref="T:MonoMac.CoreImage.CISourceOverCompositing" />,
	    <see cref="T:MonoMac.CoreImage.CIStraightenFilter" />,
	    <see cref="T:MonoMac.CoreImage.CIStripesGenerator" />,
	    <see cref="T:MonoMac.CoreImage.CITemperatureAndTint" />,
	    <see cref="T:MonoMac.CoreImage.CIToneCurve" />,
	    <see cref="T:MonoMac.CoreImage.CIVibrance" />,
	    <see cref="T:MonoMac.CoreImage.CIVignette" /> and <see cref="T:MonoMac.CoreImage.CIWhitePointAdjust" />.
  
	  </para>
          <para>
	    
	    To create a filter of the specified type, instantiate an
	    instance of one of the above types, assign values to their
	    properties and extract the result by using the OutputImage
	    property.
	    
	  </para>
          <example>
            <code lang="C#">
var sepiaFilter = new CISepiaTone () {
  	Image = mySourceImage,
	Intensity = 0.8f
};
	    </code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InputKeys">
      <MemberSignature Language="C#" Value="public virtual string[] InputKeys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] InputKeys" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoMac.Foundation.Export("inputKeys")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public MonoMac.Foundation.NSObject this[MonoMac.Foundation.NSString key] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoMac.Foundation.NSObject Item(class MonoMac.Foundation.NSString)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoMac.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="MonoMac.Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public virtual string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoMac.Foundation.Export("name")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OutputKeys">
      <MemberSignature Language="C#" Value="public virtual string[] OutputKeys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] OutputKeys" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoMac.Foundation.Export("outputKeys")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterFilterName">
      <MemberSignature Language="C#" Value="public static void RegisterFilterName (string name, MonoMac.Foundation.NSObject constructorObject, MonoMac.Foundation.NSDictionary classAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterFilterName(string name, class MonoMac.Foundation.NSObject constructorObject, class MonoMac.Foundation.NSDictionary classAttributes) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("registerFilterName:constructor:classAttributes:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="constructorObject" Type="MonoMac.Foundation.NSObject" />
        <Parameter Name="classAttributes" Type="MonoMac.Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="constructorObject">To be added.</param>
        <param name="classAttributes">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDefaults">
      <MemberSignature Language="C#" Value="public virtual void SetDefaults ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetDefaults() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoMac.Foundation.Export("setDefaults")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
